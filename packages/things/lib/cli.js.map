{"version":3,"sources":["../src/cli.ts"],"names":["process","env","twd","chdir","create","require","list","generate","update","init","logs","output","search","status","commands","name","desc","handler","argv","index","type","language","format","keywords","options","alias","print","print_format","autofly","Autofly","addResult","obj"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nif (process.env.twd) {\n  process.chdir(process.env.twd)\n}\nimport { buildCli } from 'cliver'\nimport { file } from './lib/file';\nimport { alfred } from './lib/alfred';\nimport { Autofly } from 'cliver4alfred/src/';\nimport { arrival } from './lib/arrival';\nlet {create} = require('./lib/create')\nlet {list} = require('./lib/list')\nlet {generate} = require('./lib/generate')\nlet {update} = require('./lib/update')\nlet {init} = require('./lib/init')\nlet {logs} = require('./lib/logs')\nlet {output} = require('./lib/output')\nlet {search} = require('./lib/search')\nlet {status} = require('./lib/status')\n\nconst commands = [{\n    name: \"new [name]\",\n    desc: \"create new ADR\",\n    handler(argv) {\n        if (argv.name) {\n          create(argv.name)\n        }\n    }\n    \n},{\n    name: \"file\",\n    desc: \"get file path\",\n    handler(argv) {\n      if (argv.index) {\n        file(argv.index)\n      }\n    }\n},{\n    name: \"list\",\n    desc: \"list all ADR\",\n    handler() {\n      return list()\n    }\n},{\n    name: \"update\",\n    desc: \"update ADR\",\n    handler() {\n      return update()\n    }\n  },{\n\n    name: \"arrival\",\n    desc: \"arrival ADR\",\n    handler(argv) {\n      if(argv.index)\n      return arrival(argv.index)\n    }\n},{\n    name: \"status [status]\",\n    desc: \"change one ADR status\",\n    handler(argv) {\n        if (argv.index) {\n          status(argv.index,argv.status)\n        }\n    }\n},{\n    name: \"generate [type]\",\n    desc: \"generate toc or graph, default toc\",\n    handler(argv) {\n      generate(argv.type)\n    }\n},{\n    name: \"init [language]\",\n    desc: \"init ADR with language, e.g. ``adr init en``\",\n    handler(argv) {\n      init(argv.language)\n    }\n},{\n    name: \"logs\",\n    desc: \"list one ADR status logs\",\n    handler(argv) {\n      if(argv.index){\n        logs(argv.index)\n      }\n    }\n},{\n    name: \"export [format]\",\n    desc: \"export ADR reporter in HTML, CSV, JSON, Markdown\",\n    handler(argv) {\n      if(argv.format){\n        output(argv.format)\n      }\n    }\n},{\n    name: \"search [keywords]\",\n    desc: \"search ADRs by keywords\",\n    handler(argv) {\n      if(argv.keywords){\n        search(argv.keywords)\n      }\n    }\n}]\nconst options = [{\n  name:'print',\n  alias:'p',\n  desc: '输出格式',\n  handler(argv){\n    if(argv.print){\n      process.env.print_format = argv.print\n    }\n  }\n},{\n  name:'index',\n  alias:'i',\n  desc: '文件序列'\n}]\nconst autofly = new Autofly({commands, options})\nautofly.addResult((obj) => {\n  alfred(obj)\n})\nbuildCli(autofly.output())\n\n"],"file":"cli.js"}