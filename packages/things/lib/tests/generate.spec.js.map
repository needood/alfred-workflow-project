{"version":3,"sources":["../../src/tests/generate.spec.ts"],"names":["sinon","require","walkSync","Config","ADR","t","ADRGetSavePathSpy","stub","returns","consoleSpy","console","entriesSpy","relativePath","basePath","mode","size","mtime","results","generate","log","deepEqual","restore","called"],"mappings":"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","sourcesContent":["let sinon = require('sinon')\nlet walkSync = require('walk-sync')\nimport test from 'ava'\nimport ADR from 'adr'\n\nlet Config = ADR.Config\n\ntest('ADR: generate graph', t => {\n  let ADRGetSavePathSpy = sinon.stub(Config, 'getSavePath').returns('./')\n  let consoleSpy = sinon.stub(console, 'log')\n  let entriesSpy = sinon.stub(walkSync, 'entries').returns([\n    {\n      relativePath: '001-编写完整的单元测试.md',\n      basePath: '/test',\n      mode: 33188,\n      size: 246,\n      mtime: 1511435254653\n    },\n    {\n      relativePath: '002-编写完整的单元测试.md',\n      basePath: '/test',\n      mode: 33188,\n      size: 246,\n      mtime: 1511435254653\n    },\n    {\n      relativePath: 'README.md',\n      basePath: '/test',\n      mode: 33188,\n      size: 246,\n      mtime: 1511435254653 }\n  ])\n\n  let results = ADR.generate('graph')\n  console.log(results)\n  t.deepEqual(results,\n`digraph {\n  node [shape=plaintext];\n  _1 [label=\"1.编写完整的单元测试\"; URL=\"001-编写完整的单元测试.md\"]\n  _2 [label=\"2.编写完整的单元测试\"; URL=\"002-编写完整的单元测试.md\"]\n  _1 -> _2 [style=\"dotted\"];\n}\n`)\n\n  consoleSpy.restore()\n  ADRGetSavePathSpy.restore()\n  entriesSpy.restore()\n})\n\ntest('ADR: generate toc', t => {\n  let ADRGetSavePathSpy = sinon.stub(Config, 'getSavePath').returns('./')\n  let consoleSpy = sinon.stub(console, 'log')\n  let entriesSpy = sinon.stub(walkSync, 'entries').returns([\n    {\n      relativePath: '001-编写完整的单元测试.md',\n      basePath: '/test',\n      mode: 33188,\n      size: 246,\n      mtime: 1511435254653\n    },\n    {\n      relativePath: '002-编写完整的单元测试.md',\n      basePath: '/test',\n      mode: 33188,\n      size: 246,\n      mtime: 1511435254653\n    },\n    {\n      relativePath: 'README.md',\n      basePath: '/test',\n      mode: 33188,\n      size: 246,\n      mtime: 1511435254653 }\n  ])\n\n  let results = ADR.generate('toc')\n  console.log(results)\n  t.deepEqual(results,\n`# 架构决策记录\n\n* [1. 编写完整的单元测试](001-编写完整的单元测试.md)\n* [2. 编写完整的单元测试](002-编写完整的单元测试.md)`)\n\n  consoleSpy.restore()\n  ADRGetSavePathSpy.restore()\n  entriesSpy.restore()\n})\n\ntest('ADR: generate error', t => {\n  let consoleSpy = sinon.stub(console, 'log')\n  ADR.generate('others')\n  t.deepEqual(consoleSpy.called, true)\n  consoleSpy.restore()\n})\n"],"file":"generate.spec.js"}