{"version":3,"sources":["../../src/tests/HtmlBuilder.spec.ts"],"names":["sinon","require","walkSync","fs","MdHelper","ADR","Utils","Config","adrTemplate","t","renderHtml","ADRGetSavePathSpy","stub","returns","dirSpy","mdHelperSpy","fsReadSpy","onCall","entriesSpy","relativePath","basePath","mode","size","mtime","htmlBuilder","HtmlBuilder","output","buildContent","deepEqual","restore"],"mappings":";;;;AAAA;;AAKA;;AAHA,IAAIA,KAAK,GAAGC,OAAO,SAAnB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,aAAtB;;AACA,IAAIE,EAAE,GAAGF,OAAO,MAAhB;;AAGA,IAAIG,QAAQ,GAAGC,aAAID,QAAnB;AACA,IAAIE,KAAK,GAAGD,aAAIC,KAAhB;AACA,IAAIC,MAAM,GAAGF,aAAIE,MAAjB;AAEA,IAAIC,WAAW,GAAI;;;;;;;;CAAnB;AAUA,kBAAK,kBAAL,EAAyBC,CAAC,IAAI;AAC5B,MAAIC,UAAU,GAAI,QAAlB;AAEA,MAAIC,iBAAiB,GAAGX,KAAK,CAACY,IAAN,CAAWL,MAAX,EAAmB,aAAnB,EAAkCM,OAAlC,CAA0C,IAA1C,CAAxB;AACA,MAAIC,MAAM,GAAGd,KAAK,CAACY,IAAN,CAAWN,KAAX,EAAkB,YAAlB,EAAgCO,OAAhC,CAAwC,GAAxC,CAAb;AACA,MAAIE,WAAW,GAAGf,KAAK,CAACY,IAAN,CAAWR,QAAX,EAAqB,UAArB,EAAiCS,OAAjC,CAAyCH,UAAzC,CAAlB,CAL4B,CAM5B;;AACA,MAAIM,SAAS,GAAGhB,KAAK,CAACY,IAAN,CAAWT,EAAX,EAAe,cAAf,EACbc,MADa,CACN,CADM,EACHJ,OADG,CACKL,WADL,EAEbS,MAFa,CAEN,CAFM,EAEHJ,OAFG,CAEKL,WAFL,EAGbS,MAHa,CAGN,CAHM,EAGHJ,OAHG,CAGK,EAHL,CAAhB;AAIA,MAAIK,UAAU,GAAGlB,KAAK,CAACY,IAAN,CAAWV,QAAX,EAAqB,SAArB,EAAgCW,OAAhC,CAAwC,CACvD;AACEM,IAAAA,YAAY,EAAE,kBADhB;AAEEC,IAAAA,QAAQ,EAAE,sCAFZ;AAGEC,IAAAA,IAAI,EAAE,KAHR;AAIEC,IAAAA,IAAI,EAAE,GAJR;AAKEC,IAAAA,KAAK,EAAE;AALT,GADuD,EAQvD;AACEJ,IAAAA,YAAY,EAAE,WADhB;AAEEC,IAAAA,QAAQ,EAAE,sCAFZ;AAGEC,IAAAA,IAAI,EAAE,KAHR;AAIEC,IAAAA,IAAI,EAAE,GAJR;AAKEC,IAAAA,KAAK,EAAE;AALT,GARuD,CAAxC,CAAjB;AAiBA,MAAIC,WAAW,GAAG,IAAInB,aAAIoB,WAAR,CAAoB,EAApB,EAAwB,EAAxB,CAAlB;AACA,MAAIC,MAAM,GAAGF,WAAW,CAACG,YAAZ,EAAb;AACAlB,EAAAA,CAAC,CAACmB,SAAF,CAAYlB,UAAZ,EAAwBgB,MAAxB;AACAf,EAAAA,iBAAiB,CAACkB,OAAlB;AACAb,EAAAA,SAAS,CAACa,OAAV;AACAX,EAAAA,UAAU,CAACW,OAAX;AACAd,EAAAA,WAAW,CAACc,OAAZ;AACAf,EAAAA,MAAM,CAACe,OAAP,GAnC4B,CAoC5B;AACD,CArCD","sourcesContent":["import test from 'ava'\n\nlet sinon = require('sinon')\nlet walkSync = require('walk-sync')\nlet fs = require('fs')\nimport ADR from 'adr'\n\nlet MdHelper = ADR.MdHelper\nlet Utils = ADR.Utils\nlet Config = ADR.Config\n\nlet adrTemplate = `# 1. 编写完整的单元测试\n\n日期: 2017/11/22\n\n## 状态\n\n2017-11-22 提议\n2017-11-26 已完成\n`\n\ntest('ADR: export html', t => {\n  let renderHtml = `<html>`\n\n  let ADRGetSavePathSpy = sinon.stub(Config, 'getSavePath').returns('./')\n  let dirSpy = sinon.stub(Utils, 'getWorkDir').returns('.')\n  let mdHelperSpy = sinon.stub(MdHelper, 'mdRender').returns(renderHtml)\n  // let consoleSpy = sinon.stub(console, 'log')\n  let fsReadSpy = sinon.stub(fs, 'readFileSync')\n    .onCall(0).returns(adrTemplate)\n    .onCall(1).returns(adrTemplate)\n    .onCall(2).returns('')\n  let entriesSpy = sinon.stub(walkSync, 'entries').returns([\n    {\n      relativePath: '001-编写完整的单元测试.md',\n      basePath: '/Users/fdhuang/learing/adr/docs/adr/',\n      mode: 33188,\n      size: 246,\n      mtime: 1511435254653\n    },\n    {\n      relativePath: 'README.md',\n      basePath: '/Users/fdhuang/learing/adr/docs/adr/',\n      mode: 33188,\n      size: 246,\n      mtime: 1511435254653\n    }\n  ])\n\n  let htmlBuilder = new ADR.HtmlBuilder('', '')\n  let output = htmlBuilder.buildContent()\n  t.deepEqual(renderHtml, output)\n  ADRGetSavePathSpy.restore()\n  fsReadSpy.restore()\n  entriesSpy.restore()\n  mdHelperSpy.restore()\n  dirSpy.restore()\n  // consoleSpy.restore()\n})\n"],"file":"HtmlBuilder.spec.js"}