{"version":3,"sources":["../../src/tests/utils.spec.ts"],"names":["sinon","require","fs","walkSync","LRU","Utils","ADR","Config","t","str","generateFileName","deepEqual","fsExistSpy","stub","returns","fsReadSpy","JSON","stringify","path","dir","getSavePath","includes","restore","cacheSpy","prototype","indexOf","createIndexByNumber","entriesSpy","relativePath","basePath","mode","size","mtime","lastNumber","getLatestIndex","newIndexString","getNewIndexString","language","getLanguage","clock","useFakeTimers","Date","createDateString"],"mappings":"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","sourcesContent":["let sinon = require('sinon')\nlet fs = require('fs')\nlet walkSync = require('walk-sync')\nlet LRU = require('lru-cache')\n\nimport test from 'ava'\nimport ADR from 'adr'\n\nlet Utils = ADR.Utils\nlet Config = ADR.Config\n\ntest('generateFileName: test for Chinese utf-8', t => {\n  let str = Utils.generateFileName('你無可奈何asd fsadf')\n  t.deepEqual(str, '你無可奈何asd-fsadf')\n})\n\ntest('generateFileName: test for newline', t => {\n  let str = Utils.generateFileName('adr new fdsa \\n ADR')\n  t.deepEqual(str, 'adr-new-fdsa-adr')\n})\n\ntest('getSavePath: when no exist config file', t => {\n  let fsExistSpy = sinon.stub(fs, 'existsSync').returns(false)\n  let fsReadSpy = sinon.stub(fs, 'readFileSync').returns(JSON.stringify({\n    path: 'some'\n  }))\n\n  let dir = Config.getSavePath()\n  t.deepEqual(dir.includes('docs/adr/'), true)\n  fsExistSpy.restore()\n  fsReadSpy.restore()\n})\n\ntest('getSavePath: when exist config file', t => {\n  let fsExistSpy = sinon.stub(fs, 'existsSync').returns(true)\n  let cacheSpy = sinon.stub(LRU.prototype, 'get').returns({\n    path: 'some-path'\n  })\n  let fsReadSpy = sinon.stub(fs, 'readFileSync').returns(JSON.stringify({\n    path: 'some-path'\n  }))\n\n  let dir = Config.getSavePath()\n  t.deepEqual(dir.indexOf('some-path') !== -1, true)\n  fsExistSpy.restore()\n  fsReadSpy.restore()\n  cacheSpy.restore()\n})\n\ntest('createIndexByNumber: should return correct pad', t => {\n  let str = Utils.createIndexByNumber(1)\n  t.deepEqual(str, '0001')\n})\n\ntest('createIndexByNumber: should return correct pad', t => {\n  let str = Utils.createIndexByNumber(11)\n  t.deepEqual(str, '0011')\n})\n\ntest('createIndexByNumber: should return correct pad', t => {\n  let str = Utils.createIndexByNumber(999)\n  t.deepEqual(str, '0999')\n})\n\ntest('getLatestIndex: when exist config file', t => {\n  let entriesSpy = sinon.stub(walkSync, 'entries').returns([\n    {\n      relativePath: '001-编写完整的单元测试.md',\n      basePath: '/Users/fdhuang/learing/adr/docs/adr/',\n      mode: 33188,\n      size: 246,\n      mtime: 1511435254653\n    },\n    {\n      relativePath: 'README.md',\n      basePath: '/Users/fdhuang/learing/adr/docs/adr/',\n      mode: 33188,\n      size: 246,\n      mtime: 1511435254653\n    }\n  ])\n\n  let lastNumber = Utils.getLatestIndex()\n  t.deepEqual(1, lastNumber)\n  entriesSpy.restore()\n})\n\ntest('getNewNumber: when exist last number', t => {\n  let entriesSpy = sinon.stub(walkSync, 'entries').returns([\n    {\n      relativePath: '001-编写完整的单元测试.md',\n      basePath: '/Users/fdhuang/learing/adr/docs/adr/',\n      mode: 33188,\n      size: 246,\n      mtime: 1511435254653\n    },\n    {\n      relativePath: 'README.md',\n      basePath: '/Users/fdhuang/learing/adr/docs/adr/',\n      mode: 33188,\n      size: 246,\n      mtime: 1511435254653\n    }\n  ])\n\n  let newIndexString = Utils.getNewIndexString()\n  t.deepEqual('0002', newIndexString)\n  entriesSpy.restore()\n})\n\ntest('getNewNumber: when exist last number', t => {\n  let entriesSpy = sinon.stub(walkSync, 'entries').returns([])\n\n  let newIndexString = Utils.getNewIndexString()\n  t.deepEqual('0001', newIndexString)\n  entriesSpy.restore()\n})\n\ntest('getLanguage: should enable get language', t => {\n  let fsExistSpy = sinon.stub(fs, 'existsSync').returns(true)\n  let cacheSpy = sinon.stub(LRU.prototype, 'get').returns({\n    path: 'some',\n    language: 'test'\n  })\n  let fsReadSpy = sinon.stub(fs, 'readFileSync').returns(JSON.stringify({\n    path: 'some',\n    language: 'test'\n  }))\n\n  let language = Config.getLanguage() ? Config.getLanguage() : ''\n  if (!language) language = ''\n  t.deepEqual(language, 'test')\n  fsExistSpy.restore()\n  fsReadSpy.restore()\n  cacheSpy.restore()\n})\n\ntest('createDateString: should return correct date string', t => {\n  let clock = sinon.useFakeTimers(new Date(2099,0,1))\n\n  let language = Utils.createDateString()\n  t.deepEqual(language, '2099-01-01')\n  clock.restore()\n})\n"],"file":"utils.spec.js"}