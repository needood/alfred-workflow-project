{"version":3,"sources":["../../src/tests/output.spec.ts"],"names":["sinon","require","walkSync","fs","LRU","Config","ADR","adrTemplate","adrOptions","JSON","stringify","path","language","t","ADRGetSavePathSpy","stub","returns","consoleSpy","console","fsWriteSpy","cacheSpy","prototype","fsReadSpy","onCall","entriesSpy","relativePath","basePath","mode","size","mtime","results","output","deepEqual","restore","calledWith"],"mappings":"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","sourcesContent":["let sinon = require('sinon')\nlet walkSync = require('walk-sync')\nlet fs = require('fs')\nlet LRU = require('lru-cache')\n\nimport test from 'ava'\nimport ADR from 'adr'\n\nlet Config = ADR.Config\n\nlet adrTemplate = `# 1. 编写完整的单元测试\n\n日期: 2017/11/22\n\n## 状态\n\n2017-11-22 提议\n2017-11-26 已完成\n`\n\nlet adrOptions = JSON.stringify({\n  path: './',\n  language: 'en'\n})\n\ntest('ADR: export csv', t => {\n  let ADRGetSavePathSpy = sinon.stub(Config, 'getSavePath').returns('./')\n  let consoleSpy = sinon.stub(console, 'log')\n  let fsWriteSpy = sinon.stub(fs, 'writeFileSync')\n  let cacheSpy = sinon.stub(LRU.prototype, 'get').returns({\n    path: 'some',\n    language: 'zh-cn'\n  })\n  let fsReadSpy = sinon.stub(fs, 'readFileSync')\n    .onCall(0).returns(JSON.stringify(adrOptions))\n    .onCall(1).returns(JSON.stringify(adrOptions))\n    .onCall(2).returns(JSON.stringify(adrOptions))\n    .onCall(3).returns(adrTemplate)\n  let entriesSpy = sinon.stub(walkSync, 'entries').returns([\n    {\n      relativePath: '001-编写完整的单元测试.md',\n      basePath: '/Users/fdhuang/learing/adr/docs/adr/',\n      mode: 33188,\n      size: 246,\n      mtime: 1511435254653\n    }\n  ])\n\n  let results = ADR.output('csv')\n  t.deepEqual(results,\n`Index, 决策, 上次修改时间, 最后状态\n1, 编写完整的单元测试, 2017-11-23, undefined\n`)\n  // t.deepEqual(fsWriteSpy.calledWith('./export.csv'), true)\n  ADRGetSavePathSpy.restore()\n  fsReadSpy.restore()\n  fsWriteSpy.restore()\n  entriesSpy.restore()\n  consoleSpy.restore()\n  cacheSpy.restore()\n})\n\ntest('ADR: export json', t => {\n  let ADRGetSavePathSpy = sinon.stub(Config, 'getSavePath').returns('./')\n  let consoleSpy = sinon.stub(console, 'log')\n  let fsWriteSpy = sinon.stub(fs, 'writeFileSync')\n  let fsReadSpy = sinon.stub(fs, 'readFileSync')\n    .onCall(0).returns(JSON.stringify(adrOptions))\n    .onCall(1).returns(JSON.stringify(adrOptions))\n    .onCall(2).returns(JSON.stringify(adrOptions))\n    .onCall(3).returns(adrTemplate)\n  let entriesSpy = sinon.stub(walkSync, 'entries').returns([\n    {\n      relativePath: '001-编写完整的单元测试.md',\n      basePath: '/Users/fdhuang/learing/adr/docs/adr/',\n      mode: 33188,\n      size: 246,\n      mtime: 1511435254653\n    }\n  ])\n\n  let results = ADR.output('json')\n  t.deepEqual(results, `[{\"index\":1,\"decision\":\"编写完整的单元测试\",\"modifiedDate\":\"2017-11-23\"}]`)\n  // t.deepEqual(fsWriteSpy.calledWith('./export.csv'), true)\n  ADRGetSavePathSpy.restore()\n  fsReadSpy.restore()\n  fsWriteSpy.restore()\n  entriesSpy.restore()\n  consoleSpy.restore()\n})\n\ntest('ADR: when export error', t => {\n  let consoleSpy = sinon.stub(console, 'log')\n\n  ADR.output('excel')\n  t.deepEqual(consoleSpy.calledWith('\\n error: type excel current not supported'), true)\n  consoleSpy.restore()\n})\n"],"file":"output.spec.js"}