{"version":3,"sources":["../../src/tests/update.spec.ts"],"names":["sinon","require","fs","walkSync","Config","ADR","mdTemplate","t","ADRGetSavePathSpy","stub","returns","fsWriteSpy","consoleSpy","console","renameSpy","entriesSpy","relativePath","basePath","mode","size","mtime","fsReadSpy","onCall","JSON","stringify","path","update","deepEqual","callCount","calledWith","restore"],"mappings":";;;;AAIA;;AAEA;;AANA,IAAIA,KAAK,GAAGC,OAAO,SAAnB;;AACA,IAAIC,EAAE,GAAGD,OAAO,MAAhB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,aAAtB;;AAMA,IAAIG,MAAM,GAAGC,aAAID,MAAjB;AAEA,IAAIE,UAAU,GAAI;;;;;;;;;CAAlB;AAWA,kBAAK,sBAAL,EAA6BC,CAAC,IAAI;AAChC,MAAIC,iBAAiB,GAAGR,KAAK,CAACS,IAAN,CAAWL,MAAX,EAAmB,aAAnB,EAAkCM,OAAlC,CAA0C,IAA1C,CAAxB;AACA,MAAIC,UAAU,GAAGX,KAAK,CAACS,IAAN,CAAWP,EAAX,EAAe,eAAf,CAAjB;AACA,MAAIU,UAAU,GAAGZ,KAAK,CAACS,IAAN,CAAWI,OAAX,EAAoB,KAApB,CAAjB;AACA,MAAIC,SAAS,GAAGd,KAAK,CAACS,IAAN,CAAWP,EAAX,EAAe,YAAf,CAAhB;AACA,MAAIa,UAAU,GAAGf,KAAK,CAACS,IAAN,CAAWN,QAAX,EAAqB,SAArB,EAAgCO,OAAhC,CAAwC,CACvD;AACEM,IAAAA,YAAY,EAAE,qBADhB;AAEEC,IAAAA,QAAQ,EAAE,sCAFZ;AAGEC,IAAAA,IAAI,EAAE,KAHR;AAIEC,IAAAA,IAAI,EAAE,GAJR;AAKEC,IAAAA,KAAK,EAAE;AALT,GADuD,EAQvD;AACEJ,IAAAA,YAAY,EAAE,eADhB;AAEEC,IAAAA,QAAQ,EAAE,sCAFZ;AAGEC,IAAAA,IAAI,EAAE,KAHR;AAIEC,IAAAA,IAAI,EAAE,GAJR;AAKEC,IAAAA,KAAK,EAAE;AALT,GARuD,CAAxC,CAAjB;AAgBA,MAAIC,SAAS,GAAGrB,KAAK,CAACS,IAAN,CAAWP,EAAX,EAAe,cAAf,CAAhB;AACAmB,EAAAA,SAAS,CACNC,MADH,CACU,CADV,EACaZ,OADb,CACqBJ,UADrB,EAEGgB,MAFH,CAEU,CAFV,EAEaZ,OAFb,CAEqBJ,UAFrB,EAGGgB,MAHH,CAGU,CAHV,EAGaZ,OAHb,CAGqB,IAHrB,EAIGY,MAJH,CAIU,CAJV,EAIaZ,OAJb,CAIqBa,IAAI,CAACC,SAAL,CAAe;AAChCC,IAAAA,IAAI,EAAE;AAD0B,GAAf,CAJrB;;AAQApB,eAAIqB,MAAJ;;AACAnB,EAAAA,CAAC,CAACoB,SAAF,CAAYhB,UAAU,CAACiB,SAAvB,EAAkC,CAAlC;AACArB,EAAAA,CAAC,CAACoB,SAAF,CAAYN,SAAS,CAACO,SAAtB,EAAiC,CAAjC;AACArB,EAAAA,CAAC,CAACoB,SAAF,CAAYb,SAAS,CAACc,SAAtB,EAAiC,CAAjC;AACArB,EAAAA,CAAC,CAACoB,SAAF,CAAYf,UAAU,CAACiB,UAAX,CAAsB,yCAAtB,CAAZ,EAA8E,IAA9E;AACAlB,EAAAA,UAAU,CAACmB,OAAX;AACAT,EAAAA,SAAS,CAACS,OAAV;AACAf,EAAAA,UAAU,CAACe,OAAX;AACAlB,EAAAA,UAAU,CAACkB,OAAX;AACAhB,EAAAA,SAAS,CAACgB,OAAV;AACAtB,EAAAA,iBAAiB,CAACsB,OAAlB;AACD,CAzCD","sourcesContent":["let sinon = require('sinon')\nlet fs = require('fs')\nlet walkSync = require('walk-sync')\n\nimport test from 'ava'\n\nimport ADR from 'adr'\n\nlet Config = ADR.Config\n\nlet mdTemplate = `# 1. 更友好的 CLI\n\n日期: 2017-11-23\n\n## 状态\n\n列表：提议/通过/完成/已弃用/已取代\n\n2017-11-23 提议\n`\n\ntest('ADR: init in chinese', t => {\n  let ADRGetSavePathSpy = sinon.stub(Config, 'getSavePath').returns('./')\n  let fsWriteSpy = sinon.stub(fs, 'writeFileSync')\n  let consoleSpy = sinon.stub(console, 'log')\n  let renameSpy = sinon.stub(fs, 'renameSync')\n  let entriesSpy = sinon.stub(walkSync, 'entries').returns([\n    {\n      relativePath: '001-DAF编写完整的单元测试.md',\n      basePath: '/Users/fdhuang/learing/adr/docs/adr/',\n      mode: 33188,\n      size: 246,\n      mtime: 1511435254653\n    },\n    {\n      relativePath: '0000-tests.md',\n      basePath: '/Users/fdhuang/learing/adr/docs/adr/',\n      mode: 33188,\n      size: 246,\n      mtime: 1511435254653\n    }\n  ])\n  let fsReadSpy = sinon.stub(fs, 'readFileSync')\n  fsReadSpy\n    .onCall(0).returns(mdTemplate)\n    .onCall(2).returns(mdTemplate)\n    .onCall(3).returns('{}')\n    .onCall(1).returns(JSON.stringify({\n      path: 'some'\n    }))\n\n  ADR.update()\n  t.deepEqual(fsWriteSpy.callCount, 2)\n  t.deepEqual(fsReadSpy.callCount, 2)\n  t.deepEqual(renameSpy.callCount, 1)\n  t.deepEqual(consoleSpy.calledWith('001-DAF编写完整的单元测试.md -> 0001-更友好的-cli.md'), true)\n  fsWriteSpy.restore()\n  fsReadSpy.restore()\n  entriesSpy.restore()\n  consoleSpy.restore()\n  renameSpy.restore()\n  ADRGetSavePathSpy.restore()\n})\n"],"file":"update.spec.js"}