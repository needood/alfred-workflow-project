{"version":3,"sources":["../../src/tests/list.spec.ts"],"names":["sinon","require","fs","walkSync","colors","Utils","ADR","Config","adrTemplate","adrOptions","JSON","stringify","path","language","t","ADRGetSavePathSpy","stub","returns","i18nSpy","decision","modifiedDate","lastStatus","logSavePath","consoleSpy","console","fsReadSpy","onCall","entriesSpy","relativePath","basePath","mode","size","mtime","results","list","deepEqual","restore"],"mappings":";;;;AAIA;;AACA;;AALA,IAAIA,KAAK,GAAGC,OAAO,SAAnB;;AACA,IAAIC,EAAE,GAAGD,OAAO,MAAhB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,aAAtB;;AACA,IAAIG,MAAM,GAAGH,OAAO,eAApB;;AAIA,IAAII,KAAK,GAAGC,aAAID,KAAhB;AACA,IAAIE,MAAM,GAAGD,aAAIC,MAAjB;AAEA,IAAIC,WAAW,GAAI;;;;;;;;;CAAnB;AAWA,IAAIC,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAe;AAC9BC,EAAAA,IAAI,EAAE,IADwB;AAE9BC,EAAAA,QAAQ,EAAE;AAFoB,CAAf,CAAjB;AAKA,kBAAK,WAAL,EAAkBC,CAAC,IAAI;AACrB,MAAIC,iBAAiB,GAAGf,KAAK,CAACgB,IAAN,CAAWT,MAAX,EAAmB,aAAnB,EAAkCU,OAAlC,CAA0C,IAA1C,CAAxB;AACA,MAAIC,OAAO,GAAGlB,KAAK,CAACgB,IAAN,CAAWX,KAAX,EAAkB,SAAlB,EAA6BY,OAA7B,CAAqC;AACjDE,IAAAA,QAAQ,EAAE,IADuC;AAEjDC,IAAAA,YAAY,EAAE,QAFmC;AAGjDC,IAAAA,UAAU,EAAE,MAHqC;AAIjDC,IAAAA,WAAW,EAAE;AAJoC,GAArC,CAAd;AAMA,MAAIC,UAAU,GAAGvB,KAAK,CAACgB,IAAN,CAAWQ,OAAX,EAAoB,KAApB,CAAjB;AACA,MAAIC,SAAS,GAAGzB,KAAK,CAACgB,IAAN,CAAWd,EAAX,EAAe,cAAf,EACbwB,MADa,CACN,CADM,EACHT,OADG,CACKT,WADL,EAEbkB,MAFa,CAEN,CAFM,EAEHT,OAFG,CAEKT,WAFL,EAGbkB,MAHa,CAGN,CAHM,EAGHT,OAHG,CAGKP,IAAI,CAACC,SAAL,CAAeF,UAAf,CAHL,EAIbiB,MAJa,CAIN,CAJM,EAIHT,OAJG,CAIKP,IAAI,CAACC,SAAL,CAAeF,UAAf,CAJL,CAAhB;AAKA,MAAIkB,UAAU,GAAG3B,KAAK,CAACgB,IAAN,CAAWb,QAAX,EAAqB,SAArB,EAAgCc,OAAhC,CAAwC,CAAC;AACxDW,IAAAA,YAAY,EAAE,kBAD0C;AAExDC,IAAAA,QAAQ,EAAE,gBAF8C;AAGxDC,IAAAA,IAAI,EAAE,KAHkD;AAIxDC,IAAAA,IAAI,EAAE,GAJkD;AAKxDC,IAAAA,KAAK,EAAE;AALiD,GAAD,CAAxC,CAAjB;;AAQA,MAAIC,OAAO,GAAG3B,aAAI4B,IAAJ,EAAd;;AACApB,EAAAA,CAAC,CAACqB,SAAF,CAAYF,OAAZ,EAAsB;;;8BAGM7B,MAAM,CAAC,OAAD,CAAN,CAAgB,gBAAhB,CAAkC;;CAH9D;AAMAW,EAAAA,iBAAiB,CAACqB,OAAlB;AACAT,EAAAA,UAAU,CAACS,OAAX;AACAb,EAAAA,UAAU,CAACa,OAAX;AACAX,EAAAA,SAAS,CAACW,OAAV;AACAlB,EAAAA,OAAO,CAACkB,OAAR;AACD,CAlCD","sourcesContent":["let sinon = require('sinon')\nlet fs = require('fs')\nlet walkSync = require('walk-sync')\nlet colors = require('colors/safe')\nimport test from 'ava'\nimport ADR from 'adr'\n\nlet Utils = ADR.Utils\nlet Config = ADR.Config\n\nlet adrTemplate = `# 1. 编写单元测试\n\n日期: 2017/11/22\n\n## 状态\n\n2017-11-22 提议\n\n2017-11-26 已完成\n`\n\nlet adrOptions = JSON.stringify({\n  path: './',\n  language: 'zh-cn'\n})\n\ntest('ADR: list', t => {\n  let ADRGetSavePathSpy = sinon.stub(Config, 'getSavePath').returns('./')\n  let i18nSpy = sinon.stub(Utils, 'getI18n').returns({\n    decision: '决策',\n    modifiedDate: '上次修改时间',\n    lastStatus: '最后状态',\n    logSavePath: '保存路径：'\n  })\n  let consoleSpy = sinon.stub(console, 'log')\n  let fsReadSpy = sinon.stub(fs, 'readFileSync')\n    .onCall(0).returns(adrTemplate)\n    .onCall(1).returns(adrTemplate)\n    .onCall(2).returns(JSON.stringify(adrOptions))\n    .onCall(3).returns(JSON.stringify(adrOptions))\n  let entriesSpy = sinon.stub(walkSync, 'entries').returns([{\n    relativePath: '0001-filename.md',\n    basePath: '/adr/docs/adr/',\n    mode: 33188,\n    size: 246,\n    mtime: 1511435254653 }\n  ])\n\n  let results = ADR.list()\n  t.deepEqual(results, `╔════════════════╤══════════════╤═══════════════════╗\n║ 决策           │ 上次修改时间 │ 最后状态          ║\n╟────────────────┼──────────────┼───────────────────╢\n║ 1.编写单元测试 │ 2017-11-23   │ ${colors['green']('2017-11-26 已完成')} ║\n╚════════════════╧══════════════╧═══════════════════╝\n`)\n  ADRGetSavePathSpy.restore()\n  entriesSpy.restore()\n  consoleSpy.restore()\n  fsReadSpy.restore()\n  i18nSpy.restore()\n})\n"],"file":"list.spec.js"}