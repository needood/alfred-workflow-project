{"version":3,"sources":["../../src/lib/print.ts"],"names":["Table","require","setPrintFormat","format","process","env","print_format","getPrintFormat","results","i18n","Utils","getI18n","statusMap","Map","Array","from","Object","entries","status","map","key","value","type","items","json","item","index","getIndexByString","title","subtitle","replace","iconpath","get","valid","autocomplete","icon","path","table","array","slice","name","time"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAGA,IAAIA,KAAK,GAAGC,OAAO,SAAnB;;AACO,SAASC,cAAT,CAAwBC,MAAxB,EAAsC;AACzCC,EAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ,GAA2BH,MAA3B;AACH;;AACM,SAASI,cAAT,GAAgC;AACnC,SAAOH,OAAO,CAACC,GAAR,CAAYC,YAAnB;AACH;;AACM,SAASH,MAAT,CAAgBK,OAAhB,EAA8C;AACjD,MAAIC,IAAI,GAAGC,eAAMC,OAAN,EAAX;;AACA,MAAIC,SAAS,GAAG,IAAIC,GAAJ,CAAQC,KAAK,CAACC,IAAN,CAAWC,MAAM,CAACC,OAAP,CAAeR,IAAI,CAACS,MAApB,CAAX,EAAwCC,GAAxC,CAA4C,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAClF,WAAO,CAACA,KAAD,EAAQD,GAAR,CAAP;AACH,GAFuB,CAAR,CAAhB;AAGA,MAAME,IAAI,GAAGf,cAAc,EAA3B;;AACA,MAAIe,IAAI,KAAK,QAAb,EAAuB;AACnB,QAAMC,KAAkB,GAAGC,IAAI,CAAChB,OAAD,CAAJ,CAAcW,GAAd,CAAkBM,IAAI,IAAI;AACjD,UAAIC,KAAK,GAAGhB,eAAMiB,gBAAN,CAAuBF,IAAI,CAACG,KAA5B,CAAZ;;AACA,UAAMV,MAAM,GAAGO,IAAI,CAACI,QAAL,CAAcC,OAAd,CAAsB,OAAtB,EAA8B,EAA9B,CAAf;AACA,UAAIC,QAAJ;;AACA,UAAInB,SAAS,CAACoB,GAAV,CAAcd,MAAd,CAAJ,EAA0B;AACtBa,QAAAA,QAAQ,GAAE,aAAYnB,SAAS,CAACoB,GAAV,CAAcd,MAAd,CAAsB,MAA5C;AACH,OAFD,MAEK;AACDa,QAAAA,QAAQ,GAAE,sBAAV;AACH;;AACD;AACIE,QAAAA,KAAK,EAAC,KADV;AAEIC,QAAAA,YAAY,EAAG,MAAKR,KAAM,EAF9B;AAGIS,QAAAA,IAAI,EAAC;AACDC,UAAAA,IAAI,EAACL;AADJ;AAHT,SAMON,IANP;AAQH,KAjB0B,CAA3B;AAkBA,WAAOF,KAAP;AACH,GApBD,MAoBO;AACH,WAAOvB,KAAK,CAACqC,KAAN,CAAY7B,OAAZ,CAAP;AACH;AACJ;;AAED,SAASgB,IAAT,CAAcc,KAAd,EAA0C;AACtC,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,WAAO,EAAP;AACH;;AACD,MAAMf,KAAK,GAAGe,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAepB,GAAf,CAAmB,CAAC,CAACqB,IAAD,EAAMC,IAAN,EAAWvB,MAAX,CAAD,KAAsB;AACnD,WAAO;AACHU,MAAAA,KAAK,EAAEY,IADJ;AAEHX,MAAAA,QAAQ,EAAEX;AAFP,KAAP;AAIH,GALa,CAAd;AAMA,SAAOK,KAAP;AACH","sourcesContent":["import Utils from \"./utils\";\nimport { AlfredItem } from \"autocomplete/src\";\n\nlet Table = require('table')\nexport function setPrintFormat(format:string){\n    process.env.print_format = format\n}\nexport function getPrintFormat():string{\n    return process.env.print_format\n}\nexport function format(results: string[][] | string) {\n    let i18n = Utils.getI18n()\n    let statusMap = new Map(Array.from(Object.entries(i18n.status)).map(([key, value]) => {\n        return [value, key]\n    }))\n    const type = getPrintFormat()\n    if (type === 'alfred') {\n        const items:AlfredItem[] = json(results).map(item => {\n            let index = Utils.getIndexByString(item.title)\n            const status = item.subtitle.replace(/^.*? /,'')\n            let iconpath\n            if (statusMap.get(status)){\n                iconpath=`icon/file_${statusMap.get(status)}.png`\n            }else{\n                iconpath=`icon/file_normal.png`\n            }\n            return {\n                valid:false,\n                autocomplete: `-i=${index}`,\n                icon:{\n                    path:iconpath\n                },\n                ...item\n            }\n        })\n        return items\n    } else {\n        return Table.table(results)\n    }\n}\n\nfunction json(array: string[][] | string) {\n    if (typeof array === 'string') {\n        return []\n    }\n    const items = array.slice(1).map(([name,time,status])=>{\n        return {\n            title: name,\n            subtitle: status,\n        }\n    })\n    return items\n}"],"file":"print.js"}