{"version":3,"sources":["../../src/lib/file.ts"],"names":["file","index","outputArray","getAllFilesName","currentFileName","savePath","Config","getSavePath","_fileName","Utils","generateFileName","filePath","path","join","process","cwd","console","log","getFiles","mkdirp","sync","files","walkSync","entries","globs","ignore","file_result","env","JSON","parse","stringify","forEach","fileName","relativePath","getIndexByString"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEO,SAASA,IAAT,CAAcC,KAAd,EAAoB;AACvB,MAAIC,WAAW,GAAGC,eAAe,EAAjC;AACA,MAAIC,eAAe,GAAGF,WAAW,CAACD,KAAD,CAAjC;;AACA,MAAII,QAAQ,GAAGC,gBAAOC,WAAP,EAAf;;AACA,MAAMC,SAAS,GAAGC,eAAMC,gBAAN,CAAuBN,eAAvB,CAAlB;;AACA,MAAMO,QAAQ,GAAGC,cAAKC,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyBV,QAAzB,EAAmCG,SAAnC,CAAjB;;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACA,SAAOA,QAAP;AACH;;AACM,SAASO,QAAT,CAAkBN,IAAlB,EAAwB;AAC3B,MAAGA,IAAH,EAAQ;AACJ,QAAIP,QAAQ,GAAGC,gBAAOC,WAAP,EAAf;;AACA,QAAGF,QAAQ,KAAGO,IAAd,EAAmB;AACfO,sBAAOC,IAAP,CAAYR,IAAZ;;AACA,UAAIS,KAAK,GAAGC,kBAASC,OAAT,CAAiBX,IAAjB,EAAuB;AAAEY,QAAAA,KAAK,EAAE,CAAC,SAAD,CAAT;AAAsBC,QAAAA,MAAM,EAAE,CAAC,WAAD;AAA9B,OAAvB,CAAZ;;AACA,aAAOJ,KAAP;AACH;AACJ;;AACD,MAAMK,WAAW,GAAGZ,OAAO,CAACa,GAAR,CAAYD,WAAhC;;AACA,MAAGA,WAAH,EAAe;AACX,WAAOE,IAAI,CAACC,KAAL,CAAWH,WAAX,CAAP;AACH,GAFD,MAEK;AACD,QAAIrB,SAAQ,GAAGC,gBAAOC,WAAP,EAAf;;AACAY,oBAAOC,IAAP,CAAYf,SAAZ;;AACA,QAAIgB,MAAK,GAAGC,kBAASC,OAAT,CAAiBlB,SAAjB,EAA2B;AAAEmB,MAAAA,KAAK,EAAE,CAAC,SAAD,CAAT;AAAsBC,MAAAA,MAAM,EAAE,CAAC,WAAD;AAA9B,KAA3B,CAAZ;;AACAX,IAAAA,OAAO,CAACa,GAAR,CAAYD,WAAZ,GAA0BE,IAAI,CAACE,SAAL,CAAeT,MAAf,CAA1B;AACA,WAAOA,MAAP;AACH;AACJ;;AACM,SAASlB,eAAT,GAAqC;AACxC,MAAID,WAAW,GAAG,CAAC,EAAD,CAAlB;AACA,MAAImB,KAAK,GAAGH,QAAQ,EAApB;AACAG,EAAAA,KAAK,CAACU,OAAN,CAAc,UAAU/B,IAAV,EAAgB;AAC1B,QAAIgC,QAAQ,GAAGhC,IAAI,CAACiC,YAApB;;AAEA,QAAIhC,KAAK,GAAGQ,eAAMyB,gBAAN,CAAuBF,QAAvB,CAAZ;;AACA,QAAI/B,KAAJ,EAAW;AACPC,MAAAA,WAAW,CAACD,KAAD,CAAX,GAAqB+B,QAArB;AACH;AACJ,GAPD;AASA,SAAO9B,WAAP;AACH","sourcesContent":["import Config from './Config'\nimport Utils from './utils';\nimport path from 'path'\nimport walkSync from 'walk-sync'\nimport mkdirp from 'mkdirp'\n\nexport function file(index){\n    let outputArray = getAllFilesName()\n    let currentFileName = outputArray[index]\n    let savePath = Config.getSavePath()\n    const _fileName = Utils.generateFileName(currentFileName)\n    const filePath = path.join(process.cwd(), savePath, _fileName)\n    console.log(filePath)\n    return filePath\n}\nexport function getFiles(path?){\n    if(path){\n        let savePath = Config.getSavePath()\n        if(savePath!==path){\n            mkdirp.sync(path)\n            let files = walkSync.entries(path, { globs: ['**/*.md'], ignore: ['README.md'] })\n            return files\n        }\n    }\n    const file_result = process.env.file_result\n    if(file_result){\n        return JSON.parse(file_result)\n    }else{\n        let savePath = Config.getSavePath()\n        mkdirp.sync(savePath)\n        let files = walkSync.entries(savePath, { globs: ['**/*.md'], ignore: ['README.md'] })\n        process.env.file_result = JSON.stringify(files)\n        return files\n    }\n}\nexport function getAllFilesName(): string[] {\n    let outputArray = ['']\n    let files = getFiles()\n    files.forEach(function (file) {\n        let fileName = file.relativePath\n\n        let index = Utils.getIndexByString(fileName)\n        if (index) {\n            outputArray[index] = fileName\n        }\n    })\n\n    return outputArray\n}"],"file":"file.js"}