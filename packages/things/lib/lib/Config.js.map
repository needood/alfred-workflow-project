{"version":3,"sources":["../../src/lib/Config.ts"],"names":["fs","require","LRU","cache","max","DEFAULT_CONFIG","language","path","Utils","getWorkDir","prefix","digits","getAllConfig","defaultValue","existsSync","config","readFileSync","parsedConfig","JSON","parse","set","e","console","error","getConfig","key","get","getLanguage","getPrefix","getDigits","getSavePath","Config"],"mappings":";;;;;;;;;AAMA;;AACA;;AAPA,IAAIA,EAAE,GAAGC,OAAO,MAAhB;;AACA,IAAIC,GAAG,GAAGD,OAAO,aAAjB;;AACA,IAAIE,KAAK,GAAG,IAAID,GAAJ,CAAQ;AAClBE,EAAAA,GAAG,EAAE;AADa,CAAR,CAAZ;AAOA,IAAIC,cAAc,GAAG;AACnBC,EAAAA,QAAQ,EAAE,OADS;AAEnBC,EAAAA,IAAI,EAAEC,eAAMC,UAAN,KAAqB,YAFR;AAGnBC,EAAAA,MAAM,EAAE,EAHW;AAInBC,EAAAA,MAAM,EAAE;AAJW,CAArB;;AAOA,SAASC,YAAT,CAAuBC,YAAvB,EAA6C;AAC3C,MAAI,CAACb,EAAE,CAACc,UAAH,CAAcN,eAAMC,UAAN,KAAqB,YAAnC,CAAL,EAAuD;AACrD;AACA,WAAOI,YAAP;AACD;;AACD,MAAIE,MAAM,GAAGf,EAAE,CAACgB,YAAH,CAAgBR,eAAMC,UAAN,KAAqB,YAArC,EAAmD,MAAnD,CAAb;;AACA,MAAI;AACF,QAAIQ,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWJ,MAAX,CAAnB;AACAZ,IAAAA,KAAK,CAACiB,GAAN,CAAU,QAAV,EAAoBH,YAApB;AAEA,WAAOA,YAAP;AACD,GALD,CAKE,OAAOI,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,WAAOR,YAAP;AACD;AACF;;AAED,SAASW,SAAT,CAAoBC,GAApB,EAAiC;AAC/B,MAAIZ,YAAY,GAAGR,cAAc,CAACoB,GAAD,CAAjC;AACA,MAAIV,MAAJ;;AACA,MAAIZ,KAAK,CAACuB,GAAN,CAAU,QAAV,CAAJ,EAAyB;AACvBX,IAAAA,MAAM,GAAGZ,KAAK,CAACuB,GAAN,CAAU,QAAV,CAAT;AACD,GAFD,MAEO;AACLX,IAAAA,MAAM,GAAGH,YAAY,CAACC,YAAD,CAArB;AACD;;AACD,MAAIE,MAAM,IAAIA,MAAM,CAACU,GAAD,CAApB,EAA2B;AACzB,WAAOV,MAAM,CAACU,GAAD,CAAb;AACD;;AAED,SAAOZ,YAAP;AACD;;AAED,SAASc,WAAT,GAAwB;AACtB,SAAOH,SAAS,CAAC,UAAD,CAAhB;AACD;;AAED,SAASI,SAAT,GAAsB;AACpB,SAAOJ,SAAS,CAAC,QAAD,CAAhB;AACD;;AAED,SAASK,SAAT,GAAsB;AACpB,SAAOL,SAAS,CAAC,QAAD,CAAhB;AACD;;AAED,SAASM,WAAT,GAAgC;AAC9B,SAAON,SAAS,CAAC,MAAD,CAAhB;AACD;;AAED,IAAIO,MAAM,GAAG;AACXnB,EAAAA,YAAY,EAAEA,YADH;AAEXkB,EAAAA,WAAW,EAAEA,WAFF;AAGXH,EAAAA,WAAW,EAAEA,WAHF;AAIXC,EAAAA,SAAS,EAAEA,SAJA;AAKXC,EAAAA,SAAS,EAAEA,SALA;AAMXL,EAAAA,SAAS,EAAEA;AANA,CAAb;eASeO,M","sourcesContent":["let fs = require('fs')\nlet LRU = require('lru-cache')\nlet cache = new LRU({\n  max: 500\n})\n\nimport Utils from './utils'\nimport { init } from './init';\n\nlet DEFAULT_CONFIG = {\n  language: 'zh-cn',\n  path: Utils.getWorkDir() + '/docs/adr/',\n  prefix: '',\n  digits: 4\n}\n\nfunction getAllConfig (defaultValue: string) {\n  if (!fs.existsSync(Utils.getWorkDir() + '/.adr.json')) {\n    init()\n    return defaultValue\n  }\n  let config = fs.readFileSync(Utils.getWorkDir() + '/.adr.json', 'utf8')\n  try {\n    let parsedConfig = JSON.parse(config)\n    cache.set('config', parsedConfig)\n\n    return parsedConfig\n  } catch (e) {\n    console.error(e)\n    return defaultValue\n  }\n}\n\nfunction getConfig (key: string) {\n  let defaultValue = DEFAULT_CONFIG[key]\n  let config\n  if (cache.get('config')) {\n    config = cache.get('config')\n  } else {\n    config = getAllConfig(defaultValue)\n  }\n  if (config && config[key]) {\n    return config[key]\n  }\n\n  return defaultValue\n}\n\nfunction getLanguage () {\n  return getConfig('language')\n}\n\nfunction getPrefix () {\n  return getConfig('prefix')\n}\n\nfunction getDigits () {\n  return getConfig('digits')\n}\n\nfunction getSavePath (): string {\n  return getConfig('path')\n}\n\nlet Config = {\n  getAllConfig: getAllConfig,\n  getSavePath: getSavePath,\n  getLanguage: getLanguage,\n  getPrefix: getPrefix,\n  getDigits: getDigits,\n  getConfig: getConfig\n}\n\nexport default Config\n"],"file":"Config.js"}