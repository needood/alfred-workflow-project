{"version":3,"sources":["../../src/lib/create.ts"],"names":["fs","require","path","mkdirp","createDecisions","name","savePath","language","Config","getLanguage","raw","readFileSync","join","__dirname","newDate","Utils","createDateString","fileName","generateFileName","newIndex","getNewIndexString","fileData","replace","getLatestIndex","filePath","writeFileSync","create","getSavePath","i18n","getI18n","sync","toc","output","console","log","process","cwd","logSavePath"],"mappings":";;;;;;;;;;;AAIA;;AACA;;AACA;;AACA;;AAPA,IAAIA,EAAE,GAAGC,OAAO,MAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,QAAlB;;AACA,IAAIE,MAAM,GAAGF,OAAO,UAApB;;AAOA,SAASG,eAAT,CAA0BC,IAA1B,EAAwCC,QAAxC,EAAuE;AACrE,MAAIC,QAAQ,GAAGC,gBAAOC,WAAP,EAAf;;AACA,MAAIC,GAAG,GAAGV,EAAE,CAACW,YAAH,CAAgBT,IAAI,CAACU,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,WAAjC,EAA+C,GAAEN,QAAS,KAA1D,CAAhB,EAAiF,MAAjF,CAAV;;AACA,MAAIO,OAAO,GAAGC,eAAMC,gBAAN,EAAd;;AACA,MAAIC,QAAQ,GAAGF,eAAMG,gBAAN,CAAuBb,IAAvB,CAAf;;AAEA,MAAIc,QAAQ,GAAGJ,eAAMK,iBAAN,EAAf;;AACA,MAAIC,QAAQ,GAAGX,GAAG,CAACY,OAAJ,CAAY,WAAZ,EAAyBP,eAAMQ,cAAN,KAAyB,CAAlD,EACZD,OADY,CACJ,UADI,EACQjB,IADR,EAEZiB,OAFY,CAEJ,SAFI,EAEOR,OAFP,CAAf;AAIA,MAAIU,QAAQ,GAAGlB,QAAQ,GAAGa,QAAX,GAAsB,GAAtB,GAA4BF,QAA5B,GAAuC,KAAtD;AACAjB,EAAAA,EAAE,CAACyB,aAAH,CAAiBD,QAAjB,EAA2BH,QAA3B;AACA,SAAOG,QAAP;AACD;;AAEM,SAASE,MAAT,CAAiBrB,IAAjB,EAA+B;AACpC,MAAIC,QAAQ,GAAGE,gBAAOmB,WAAP,EAAf;;AACA,MAAIC,IAAI,GAAGb,eAAMc,OAAN,EAAX;;AACA1B,EAAAA,MAAM,CAAC2B,IAAP,CAAYxB,QAAZ;AACA,MAAMkB,QAAQ,GAAGpB,eAAe,CAACC,IAAD,EAAOC,QAAP,CAAhC;AACA,MAAIyB,GAAG,GAAG,wBAAS,KAAT,EAAgB;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAhB,CAAV;AACAhC,EAAAA,EAAE,CAACyB,aAAH,CAAiBnB,QAAQ,GAAG,WAA5B,EAAyCyB,GAAzC;;AACA,MAAG,iCAAmB,QAAtB,EAA+B;AAC7BE,IAAAA,OAAO,CAACC,GAAR,CAAYhC,IAAI,CAACU,IAAL,CAAUuB,OAAO,CAACC,GAAR,EAAV,EAAyBZ,QAAzB,CAAZ;AACD,GAFD,MAEK;AACHS,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACS,WAAL,GAAmB/B,QAA/B;AACD;AACF","sourcesContent":["let fs = require('fs')\nlet path = require('path')\nlet mkdirp = require('mkdirp')\n\nimport Config from './Config'\nimport Utils from './utils'\nimport { generate } from './generate'\nimport { getPrintFormat } from './print';\n\nfunction createDecisions (name: string, savePath: string | any | void) {\n  let language = Config.getLanguage()\n  let raw = fs.readFileSync(path.join(__dirname, '..', '..', 'templates', `${language}.md`), 'utf8')\n  let newDate = Utils.createDateString()\n  let fileName = Utils.generateFileName(name)\n\n  let newIndex = Utils.getNewIndexString()\n  let fileData = raw.replace(/{NUMBER}/g, Utils.getLatestIndex() + 1)\n    .replace(/{TITLE}/g, name)\n    .replace(/{DATE}/g, newDate)\n\n  let filePath = savePath + newIndex + '-' + fileName + '.md'\n  fs.writeFileSync(filePath, fileData)\n  return filePath\n}\n\nexport function create (name: string) {\n  let savePath = Config.getSavePath()\n  let i18n = Utils.getI18n()\n  mkdirp.sync(savePath)\n  const filePath = createDecisions(name, savePath)\n  let toc = generate('toc', { output: false })\n  fs.writeFileSync(savePath + 'README.md', toc)\n  if(getPrintFormat()==='alfred'){\n    console.log(path.join(process.cwd(), filePath))\n  }else{\n    console.log(i18n.logSavePath + savePath)\n  }\n}\n"],"file":"create.js"}