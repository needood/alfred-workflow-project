{"version":3,"sources":["../../../src/lib/output/CSVBuilder.ts"],"names":["fs","require","moment","savePath","Config","getSavePath","CSVBuilder","BasicOutput","buildFunc","index","decision","file","bodyString","lastStatus","StatusHelper","getLatestStatus","relativePath","body","mtime","format","push","buildContent","path","i18n","Utils","getI18n","graphGenerate","GenerateBuilder","startString","modifiedDate","result","setStart","setEnd","setBody","build","output","writeFileSync","workDir"],"mappings":";;;;;;;;;AAGA;;AACA;;AACA;;AACA;;AACA;;AAPA,IAAIA,EAAE,GAAGC,OAAO,MAAhB;;AACA,IAAIC,MAAM,GAAGD,OAAO,UAApB;;AAQA,IAAIE,QAAQ,GAAGC,gBAAOC,WAAP,EAAf;;AAEA,MAAMC,UAAN,SAAyBC,oBAAzB,CAAqC;AACnCC,EAAAA,SAAS,CAAEC,KAAF,EAASC,QAAT,EAAmBC,IAAnB,EAAyBC,UAAzB,EAA+C;AACtD,QAAIC,UAAU,GAAGC,sBAAaC,eAAb,CAA6BZ,QAAQ,GAAGQ,IAAI,CAACK,YAA7C,CAAjB;;AACA,QAAIC,IAAI,GAAI,GAAER,KAAM,KAAIC,QAAS,KAAIR,MAAM,CAACS,IAAI,CAACO,KAAN,CAAN,CAAmBC,MAAnB,CAA0B,YAA1B,CAAwC,KAAIN,UAAW,IAA5F;AACA,WAAOD,UAAU,CAACQ,IAAX,CAAgBH,IAAhB,CAAP;AAED;;AACDI,EAAAA,YAAY,GAAI;AACd,QAAIC,IAAI,GAAGlB,gBAAOC,WAAP,EAAX;;AACA,QAAIkB,IAAI,GAAGC,eAAMC,OAAN,EAAX;;AACA,QAAIC,aAAa,GAAG,IAAIC,gCAAJ,CAAoBL,IAApB,CAApB;AACA,QAAIM,WAAW,GAAI,UAASL,IAAI,CAACb,QAAS,KAAIa,IAAI,CAACM,YAAa,KAAIN,IAAI,CAACV,UAAW,IAApF;AACA,SAAKiB,MAAL,GAAcJ,aAAa,CACxBK,QADW,CACFH,WADE,EAEXI,MAFW,CAEJ,EAFI,EAGXC,OAHW,CAGH,KAAKzB,SAHF,EAIX0B,KAJW,EAAd;AAMA,WAAO,KAAKJ,MAAZ;AACD;;AAEDK,EAAAA,MAAM,GAAI;AACRnC,IAAAA,EAAE,CAACoC,aAAH,CAAiB,KAAKC,OAAL,GAAe,aAAhC,EAA+C,KAAKP,MAApD;AACD;;AAvBkC;;eA0BtBxB,U","sourcesContent":["let fs = require('fs')\nlet moment = require('moment')\n\nimport StatusHelper from '../StatusHelper'\nimport Utils from '../utils'\nimport Config from '../Config'\nimport BasicOutput from './BasicOutput'\nimport { GenerateBuilder } from '../base/GenerateBuilder'\n\nlet savePath = Config.getSavePath()\n\nclass CSVBuilder extends BasicOutput {\n  buildFunc (index, decision, file, bodyString): string[] {\n    let lastStatus = StatusHelper.getLatestStatus(savePath + file.relativePath)\n    let body = `${index}, ${decision}, ${moment(file.mtime).format('YYYY-MM-DD')}, ${lastStatus}\\n`\n    return bodyString.push(body)\n\n  }\n  buildContent () {\n    let path = Config.getSavePath()\n    let i18n = Utils.getI18n()\n    let graphGenerate = new GenerateBuilder(path)\n    let startString = `Index, ${i18n.decision}, ${i18n.modifiedDate}, ${i18n.lastStatus}\\n`\n    this.result = graphGenerate\n      .setStart(startString)\n      .setEnd('')\n      .setBody(this.buildFunc)\n      .build()\n\n    return this.result\n  }\n\n  output () {\n    fs.writeFileSync(this.workDir + '/export.csv', this.result)\n  }\n}\n\nexport default CSVBuilder\n"],"file":"CSVBuilder.js"}