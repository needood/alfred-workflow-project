{"version":3,"sources":["../../../src/lib/output/JSONBuilder.ts"],"names":["fs","require","moment","savePath","Config","getSavePath","JSONBuilder","BasicOutput","buildFunc","index","decision","file","bodyString","lastStatus","StatusHelper","getLatestStatus","relativePath","body","modifiedDate","mtime","format","push","buildContent","path","graphGenerate","JsonGenerateBuilder","result","setBody","build","JSON","stringify","output","writeFileSync","workDir"],"mappings":";;;;;;;;;AAAA;;AAKA;;AACA;;AACA;;AALA,IAAIA,EAAE,GAAGC,OAAO,MAAhB;;AACA,IAAIC,MAAM,GAAGD,OAAO,UAApB;;AAMA,IAAIE,QAAQ,GAAGC,gBAAOC,WAAP,EAAf;;AAEA,MAAMC,WAAN,SAA0BC,oBAA1B,CAAsC;AACpCC,EAAAA,SAAS,CAAEC,KAAF,EAASC,QAAT,EAAmBC,IAAnB,EAAyBC,UAAzB,EAA+C;AACtD,QAAIC,UAAU,GAAGC,sBAAaC,eAAb,CAA6BZ,QAAQ,GAAGQ,IAAI,CAACK,YAA7C,CAAjB;;AACA,QAAIC,IAAI,GAAG;AACTR,MAAAA,KAAK,EAAEA,KADE;AAETC,MAAAA,QAAQ,EAAEA,QAFD;AAGTQ,MAAAA,YAAY,EAAEhB,MAAM,CAACS,IAAI,CAACQ,KAAN,CAAN,CAAmBC,MAAnB,CAA0B,YAA1B,CAHL;AAITP,MAAAA,UAAU,EAAEA;AAJH,KAAX;AAMA,WAAOD,UAAU,CAACS,IAAX,CAAgBJ,IAAhB,CAAP;AACD;;AAEDK,EAAAA,YAAY,GAAI;AACd,QAAIC,IAAI,GAAGnB,gBAAOC,WAAP,EAAX;;AACA,QAAImB,aAAa,GAAG,IAAIC,wCAAJ,CAAwBF,IAAxB,CAApB;AACA,SAAKG,MAAL,GAAcF,aAAa,CACxBG,OADW,CACH,KAAKnB,SADF,EAEXoB,KAFW,EAAd;AAIA,WAAOC,IAAI,CAACC,SAAL,CAAe,KAAKJ,MAApB,CAAP;AACD;;AAEDK,EAAAA,MAAM,GAAI;AACR/B,IAAAA,EAAE,CAACgC,aAAH,CAAiB,KAAKC,OAAL,GAAe,cAAhC,EAAgDJ,IAAI,CAACC,SAAL,CAAe,KAAKJ,MAApB,CAAhD,EAA6E,OAA7E;AACD;;AAxBmC;;eA2BvBpB,W","sourcesContent":["import { JsonGenerateBuilder } from '../base/JsonGenerateBuilder'\n\nlet fs = require('fs')\nlet moment = require('moment')\n\nimport BasicOutput from './BasicOutput'\nimport StatusHelper from '../StatusHelper'\nimport Config from '../Config'\n\nlet savePath = Config.getSavePath()\n\nclass JSONBuilder extends BasicOutput {\n  buildFunc (index, decision, file, bodyString): string[] {\n    let lastStatus = StatusHelper.getLatestStatus(savePath + file.relativePath)\n    let body = {\n      index: index,\n      decision: decision,\n      modifiedDate: moment(file.mtime).format('YYYY-MM-DD'),\n      lastStatus: lastStatus\n    }\n    return bodyString.push(body)\n  }\n\n  buildContent () {\n    let path = Config.getSavePath()\n    let graphGenerate = new JsonGenerateBuilder(path)\n    this.result = graphGenerate\n      .setBody(this.buildFunc)\n      .build()\n\n    return JSON.stringify(this.result)\n  }\n\n  output () {\n    fs.writeFileSync(this.workDir + '/export.json', JSON.stringify(this.result), 'utf-8')\n  }\n}\n\nexport default JSONBuilder\n"],"file":"JSONBuilder.js"}