{"version":3,"sources":["../../src/lib/logs.ts"],"names":["walkSync","require","Table","path","Config","getSavePath","createLogsHeader","allStatus","tableHeader","currentStatus","splitCurrentStatus","split","i","length","push","createLogsBody","tableData","logs","index","outputArray","currentFileName","filePath","StatusHelper","getAllStatus","console","log","output","table"],"mappings":";;;;;;;;;;;AAGA;;AACA;;AACA;;AALA,IAAIA,QAAQ,GAAGC,OAAO,aAAtB;;AACA,IAAIC,KAAK,GAAGD,OAAO,SAAnB;;AAMA,IAAIE,IAAI,GAAGC,gBAAOC,WAAP,EAAX;;AAGA,SAASC,gBAAT,CAA2BC,SAA3B,EAA0D;AACxD,MAAIC,WAAqB,GAAG,EAA5B;AAEA,MAAIC,aAAa,GAAGF,SAAS,CAAC,CAAD,CAA7B;AACA,MAAIG,kBAAkB,GAAGD,aAAa,CAACE,KAAd,CAAoB,GAApB,CAAzB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,kBAAkB,CAACG,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAClDJ,IAAAA,WAAW,CAACM,IAAZ,CAAiB,KAAjB;AACD;;AAED,SAAON,WAAP;AACD;;AACD,SAASO,cAAT,CAAyBR,SAAzB,EAA8CS,SAA9C,EAAiF;AAC/E,OAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,SAAS,CAACM,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,QAAIJ,WAAqB,GAAG,EAA5B;AACA,QAAIC,aAAa,GAAGF,SAAS,CAACK,CAAD,CAA7B;AACA,QAAIF,kBAAkB,GAAGD,aAAa,CAACE,KAAd,CAAoB,GAApB,CAAzB;;AACA,SAAK,IAAIC,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGF,kBAAkB,CAACG,MAAvC,EAA+CD,EAAC,EAAhD,EAAoD;AAClDJ,MAAAA,WAAW,CAACM,IAAZ,CAAiBJ,kBAAkB,CAACE,EAAD,CAAnC;AACD;;AACDI,IAAAA,SAAS,CAACF,IAAV,CAAeN,WAAf;AACD;;AACD,SAAOQ,SAAP;AACD;;AAEM,SAASC,IAAT,CAAeC,KAAf,EAA8B;AACnC,MAAIC,WAAW,GAAG,4BAAlB;AACA,MAAIC,eAAe,GAAGD,WAAW,CAACD,KAAD,CAAjC;AACA,MAAIG,QAAQ,GAAGlB,IAAI,GAAGiB,eAAtB;;AACA,MAAIb,SAAS,GAAGe,sBAAaC,YAAb,CAA0BF,QAA1B,CAAhB;;AACA,MAAId,SAAS,CAACM,MAAV,KAAqB,CAAzB,EAA4B;AAC1BW,IAAAA,OAAO,CAACC,GAAR,CAAY,kEAAZ;AACA,WAAO,EAAP;AACD;;AACD,MAAIT,SAAqB,GAAG,EAA5B;AAEA,MAAIR,WAAW,GAAGF,gBAAgB,CAACC,SAAD,CAAlC;AACAS,EAAAA,SAAS,CAACF,IAAV,CAAeN,WAAf;AACAO,EAAAA,cAAc,CAACR,SAAD,EAAYS,SAAZ,CAAd;AACA,MAAIU,MAAM,GAAGxB,KAAK,CAACyB,KAAN,CAAYX,SAAZ,CAAb;AAEAQ,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACA,SAAOA,MAAP;AACD","sourcesContent":["let walkSync = require('walk-sync')\nlet Table = require('table')\n\nimport StatusHelper from './StatusHelper'\nimport Config from './Config'\nimport { getAllFilesName } from './file';\n\nlet path = Config.getSavePath()\n\n\nfunction createLogsHeader (allStatus: string[]): string[] {\n  let tableHeader: string[] = []\n\n  let currentStatus = allStatus[0]\n  let splitCurrentStatus = currentStatus.split(' ')\n\n  for (let i = 0; i < splitCurrentStatus.length; i++) {\n    tableHeader.push(' - ')\n  }\n\n  return tableHeader\n}\nfunction createLogsBody (allStatus: string[], tableData: string[][]): string[][] {\n  for (let i = 0; i < allStatus.length; i++) {\n    let tableHeader: string[] = []\n    let currentStatus = allStatus[i]\n    let splitCurrentStatus = currentStatus.split(' ')\n    for (let i = 0; i < splitCurrentStatus.length; i++) {\n      tableHeader.push(splitCurrentStatus[i])\n    }\n    tableData.push(tableHeader)\n  }\n  return tableData\n}\n\nexport function logs (index): string {\n  let outputArray = getAllFilesName()\n  let currentFileName = outputArray[index]\n  let filePath = path + currentFileName\n  let allStatus = StatusHelper.getAllStatus(filePath)\n  if (allStatus.length === 0) {\n    console.log('no status: did .adr.json config has correct config of language??')\n    return ''\n  }\n  let tableData: string[][] = []\n\n  let tableHeader = createLogsHeader(allStatus)\n  tableData.push(tableHeader)\n  createLogsBody(allStatus, tableData)\n  let output = Table.table(tableData)\n\n  console.log(output)\n  return output\n}\n"],"file":"logs.js"}