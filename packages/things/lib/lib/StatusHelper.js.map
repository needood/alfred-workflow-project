{"version":3,"sources":["../../src/lib/StatusHelper.ts"],"names":["fs","require","md","markdown","i18n","Utils","getI18n","getStatusSection","tree","statusFlag","statusSection","i","length","node","push","Status","getStatusWithDate","statusSections","status","currentStatusSection","test","setStatus","filePath","fileData","readFileSync","error","console","log","flag","regExp","data","split","line","splice","createDateString","writeFileSync","join","match","getAllStatus","parse","lastStatusSection","getLatestStatus","allStatus","StatusHelper"],"mappings":"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","sourcesContent":["let fs = require('fs')\nlet md = require('markdown').markdown\n\nimport Utils from './utils'\n\nlet i18n = Utils.getI18n()\n\nfunction getStatusSection (tree: any) {\n  let statusFlag = false\n  let statusSection: string[] = []\n  for (let i = 0; i < tree.length; i++) {\n    let node = tree[i]\n    if (statusFlag && node[0] === 'header') {\n      return statusSection\n    }\n    if (statusFlag) {\n      statusSection.push(node)\n    }\n    if (node[0] === 'header' && node[2] === i18n.Status) {\n      statusFlag = true\n    }\n  }\n  return statusSection\n}\n\nfunction getStatusWithDate (statusSections: string[]) {\n  let status: string[] = []\n  for (let i = 0; i < statusSections.length; i++) {\n    let currentStatusSection = statusSections[i]\n    if (currentStatusSection[0] === 'para') {\n      if (/\\d{1,4}-\\d{1,2}-\\d{1,2}/.test(currentStatusSection[1])) {\n        status.push(currentStatusSection[1])\n      }\n    }\n  }\n\n  return status\n}\n\nfunction setStatus (filePath, status) {\n  let fileData\n  try {\n    fileData = fs.readFileSync(filePath, 'utf8')\n  } catch (error) {\n    console.log(error)\n    return []\n  }\n  let flag = false\n  let regExp = `## ${i18n.Status}`\n  let data: string[] = fileData.split('\\n')\n  for (let i = 0; i < data.length; i++) {\n    let line: string = data[i]\n    if (flag && line[0] === '#') {\n      data.splice(i, 0, `${Utils.createDateString()} ${status}`)\n      data.splice(i + 1, 0, '')\n      return fs.writeFileSync(filePath, data.join('\\n'))\n    }\n    if (line.match(regExp)) flag = true\n  }\n}\n\nfunction getAllStatus (filePath): string[] {\n  let fileData\n  try {\n    fileData = fs.readFileSync(filePath, 'utf8')\n  } catch (error) {\n    console.log(error)\n    return []\n  }\n  let tree = md.parse(fileData)\n  let statusSections = getStatusSection(tree)\n  let status = getStatusWithDate(statusSections)\n\n  if (status.length === 0) {\n    let lastStatusSection = statusSections[statusSections.length - 1]\n    if (!(lastStatusSection && lastStatusSection[1])) {\n      return []\n    }\n    status = [lastStatusSection[1]]\n  }\n\n  return status\n}\n\nfunction getLatestStatus (filePath) {\n  let allStatus = getAllStatus(filePath)\n  return allStatus[allStatus.length - 1]\n}\n\nlet StatusHelper = {\n  setStatus: setStatus,\n  getLatestStatus: getLatestStatus,\n  getAllStatus: getAllStatus\n}\n\nexport default StatusHelper\n"],"file":"StatusHelper.js"}