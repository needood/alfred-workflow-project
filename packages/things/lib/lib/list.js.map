{"version":3,"sources":["../../src/lib/list.ts"],"names":["moment","require","colors","path","Config","getSavePath","getStatusColor","lastStatus","allStatus","Utils","getI18n","color","StatusColor","get","Object","keys","forEach","statusKey","getStatusWithColor","originLastStatus","splitStatus","split","length","replace","ColorText","buildTocBodyFun","index","decision","file","bodyString","StatusHelper","getLatestStatus","relativePath","newItem","mtime","format","push","listAdrByPath","i18n","tableData","modifiedDate","listGenerateBuilder","ListGenerateBuilder","results","setStart","setEnd","setBody","build","list","adrs","type","console","log"],"mappings":"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","sourcesContent":["let moment = require('moment')\nlet colors = require('colors/safe')\n\n\nimport Utils from './utils'\nimport StatusHelper from './StatusHelper'\nimport { ListGenerateBuilder } from './base/ListGenerateBuilder'\nimport Config from './Config'\nimport StatusColor from './enum/StatusColor'\nimport { getPrintFormat, format } from './print';\n\nlet path = Config.getSavePath()\n\nexport function getStatusColor (lastStatus: string) {\n  let allStatus = Utils.getI18n()['status']\n  let color: string | undefined = ''\n  if (!allStatus) {\n    return StatusColor.get('done')\n  }\n  Object.keys(allStatus).forEach(function (statusKey) {\n    if (allStatus[statusKey] === lastStatus) {\n      color = StatusColor.get(statusKey)\n    }\n  })\n  return color\n}\n\nfunction getStatusWithColor (lastStatus: string) {\n  if (!lastStatus) {\n    return lastStatus\n  }\n  let originLastStatus = lastStatus\n  let splitStatus = lastStatus.split(' ')\n  if (splitStatus.length > 1) {\n    lastStatus = splitStatus[splitStatus.length - 1].replace(' ', '')\n  }\n  let color = getStatusColor(lastStatus)\n  if (color) {\n    let ColorText = colors[color]\n    return originLastStatus = ColorText(originLastStatus)\n  }\n\n  return originLastStatus\n}\n\nfunction buildTocBodyFun (index, decision, file, bodyString): string[] {\n  let lastStatus = StatusHelper.getLatestStatus(path + file.relativePath)\n  let newItem = [index + '.' + decision, moment(file.mtime).format('YYYY-MM-DD'), getStatusWithColor(lastStatus)]\n  return bodyString.push(newItem)\n}\n\nfunction listAdrByPath(path: string): string[][] | string {\n  let i18n = Utils.getI18n()\n  let tableData = [i18n.decision, i18n.modifiedDate, i18n.lastStatus]\n  let listGenerateBuilder = new ListGenerateBuilder(path)\n  let results = listGenerateBuilder\n    .setStart(tableData)\n    .setEnd()\n    .setBody(buildTocBodyFun)\n    .build()\n  return results\n}\n\nexport function list (): string[][] | string {\n  let path = Config.getSavePath()\n  let adrs = listAdrByPath(path)\n  // TODO: not to remove again\n  const type = getPrintFormat()\n  if (type !== 'alfred') {\n    console.log(format(adrs))\n  }\n  return adrs\n}\n"],"file":"list.js"}