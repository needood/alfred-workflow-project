{"version":3,"sources":["../src/index.ts"],"names":["BaseAutofly","constructor","commands","options","Map","key","_variable","get","items","_results","concat","value","set","_commands","_options","handlers","_handleParam","_output","_setVariable","_getVariable","push","name","desc","handler","_","param","Object","fromEntries","forEach","console","log","JSON","stringify","variables","addResult","fn","addHandleParam","output","Autofly","_command","_option","cli","setCommand","_setCommand","setOption","_setOption","arg","process","env","query","trim","split","map","option","other","argv","command","regexpResults","exec","parse","_hasCommand","_hasOption"],"mappings":"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","sourcesContent":["import yargs from 'yargs'\nimport { bindOptions } from 'cliver/lib/options'\nimport { bindCommands } from 'cliver/lib/commands'\nexport interface AlfredItem{\n    title\n    subtitle\n    arg?\n    autocomplete?\n    valid?\n    icon?\n}\ninterface handleFunc {\n    (value): void;\n}\ninterface Command {\n    name: string\n    desc: string\n    handler: Function\n}\ninterface Option {\n    name: string\n    alias?: string,\n    desc: string,\n    handler?: Function\n}\nclass BaseAutofly {\n    private _commands: Command[]\n    private _options: Option[]\n    private _variable: Map<string, string>=new Map\n    private handlers: handleFunc[] = []\n    private _getVariable = (key: string): string => {\n        return this._variable.get(key)\n    }\n    private _output = (items: AlfredItem[] | AlfredItem): void => {\n        this._results = this._results.concat(items)\n    }\n    private _setVariable = (key: string, value: string): void => {\n        this._variable.set(key, value)\n    }\n    private _results: AlfredItem[] = []\n    private _handleParam:Map<string,any>=new Map\n    constructor({ commands, options }: { commands: Command[], options: Option[] }) {\n        this._commands = commands\n        this._options = options\n        const handlers = this.handlers\n        this._handleParam.set('output',this._output)\n        this._handleParam.set('setVariable',this._setVariable)\n        this._handleParam.set('getVariable',this._getVariable)\n        this._commands.push({\n            name: \"alfred\",\n            desc: \"for alfred\",\n            handler: _ => {\n                const param = Object.fromEntries(this._handleParam)\n                handlers.forEach(handler => {\n                    handler(param)\n                })\n                console.log(JSON.stringify({ items: this._results, variables: Object.fromEntries(this._variable) }))\n            }\n        })\n    }\n    addResult(fn: handleFunc) {\n        this.handlers.push(fn)\n    }\n    protected addHandleParam(key,value){\n        this._handleParam.set(key, value)\n    }\n    output() {\n        return { commands: this._commands, options: this._options }\n    }\n}\nexport class Autofly extends BaseAutofly {\n    constructor({ commands, options }: { commands: Command[], options: Option[] }) {\n        super({ commands, options });\n        const cli = yargs()\n        const setCommand = this._setCommand\n        const setOption = this._setOption\n        const arg = (process.env.query||'').trim().split(/ +/)\n        bindOptions(cli, options.map((option): Option => {\n            const { handler, ...other } = option\n            return {\n                handler(argv) {\n                    if(argv[option.name]){\n                        if(argv[option.name]===true){\n                            setOption(option.name, 2)\n                        }else{\n                            setOption(option.name, 1)\n                        }\n                    }\n                },\n                ...other\n            }\n        }), arg)\n        bindCommands(cli, commands.map((command): Command => {\n            const { handler, ...other } = command\n            return {\n                handler(argv) {\n                    const regexpResults = /\\[(\\w+)\\]/.exec(command.name)\n                    if (regexpResults && regexpResults[1]) {\n                        if (argv[regexpResults[1]]){\n                            setCommand(command.name, 1)\n                        }else{\n                            setCommand(command.name, 2)\n                        }\n                    }else{\n                        setCommand(command.name, 1)\n                    }\n                },\n                ...other\n            }\n        }))\n        cli.parse(arg)\n        this.addHandleParam('hasCommand', this._hasCommand)\n        this.addHandleParam('hasOption', this._hasOption)\n    }\n    private _hasCommand = (key: string): number => {\n        return this._command.get(key)||0\n    }\n    private _setCommand=(key:string,value:number)=>{\n        this._command.set(key, value)\n    }\n    private _command:Map<string,number>=new Map\n    private _option:Map<string,number>=new Map\n    private _setOption=(key:string,value:number)=>{\n        this._option.set(key, value)\n    }\n    private _hasOption = (key: string):number => {\n        return this._option.get(key)||0\n    }\n}"],"file":"index.js"}